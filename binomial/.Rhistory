return(prob)
}
#' @title binomial distribution
#' @description calculates the distribution of different success in a certain amount of trials
#' @param trials number of trials
#' @param prob probability of success
#' @return dataframe of class "bindis"
#' @export
#' @examples
bin_distribution <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
bindis <- matrix(rep(0, 2*(trials+1)), ncol=2)
colnames(bindis) <- c("success", "probability")
for(i in 1:(trials+1)){
bindis[i,1] <- i-1
bindis[i,2] <- bin_probability(trials, prob, success=(i-1))
}
bindis <- as.data.frame(bindis)
class(bindis) <- c("bindis", "data.frame")
return(bindis)
}
#' @export
plot.bindis <- function(bindis) {
barplot(bindis$probability, names.arg=bindis$success, xlab="successes", ylab="probability")
}
#' @title binomial cumulative distribution
#' @description calculates the cumulative distribution of success in a certain amount of trials
#' @param trials number of trials
#' @param prob probability of success
#' @return dataframe of class "bincum"
#' @export
#' @examples
bin_cumulative <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
bincum <- matrix(rep(0, 3*(trials+1)), ncol=3)
colnames(bincum) <- c("success", "probability", "cumulative")
for(i in 1:(trials+1)){
bincum[i,1] <- i-1
bincum[i,2] <- bin_probability(trials, prob, success=(i-1))
for(j in 1:i) {
bincum[i,3] <- bincum[i,3] + bincum[j,2]
}
}
bincum <- as.data.frame(bincum)
class(bincum) <- c("bincum", "data.frame")
return(bincum)
}
#' @export
plot.bincum <- function(bincum) {
plot(x=bincum$success, y=bincum$cumulative, xlab="successes", ylab="probability")
lines(x=bincum$success, y=bincum$cumulative)
}
bin_variable <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binvar <- list(trials=trials, prob=prob)
class(binvar) <- "binvar"
return(binvar)
}
#' @export
print.binvar <- function(binvar) {
cat('"Binomial variable"')
cat("\n\n")
cat("Parameters")
cat("\n")
cat("- number of trials: ")
cat(binvar$trials)
cat("\n")
cat("- probability of success : ")
cat(binvar$prob)
}
#' @export
summary.binvar <- function(binvar) {
binsum <- list(trials=binvar$trials,
prob=binvar$prob,
mean=aux_mean(binvar$trials, binvar$prob),
variance=aux_variance(binvar$trials, binvar$prob),
mode=aux_mode(binvar$trials, binvar$prob),
skewness=aux_skewness(binvar$trials, binvar$prob),
kurtosis=aux_kurtosis(binvar$trials, binvar$prob))
class(binsum) <- "summary.binvar"
return(binsum)
}
#' @export
print.summary.binvar <- function(binsum) {
cat('"Summary Binomial"')
cat("\n\n")
cat("Parameters")
cat("\n")
cat("- number of trials: ")
cat(binsum$trials)
cat("\n")
cat("- prob of success : ")
cat(binsum$prob)
cat("\n\n")
cat("Measures")
cat("\n")
cat("- mean    : ")
cat(binsum$mean)
cat("\n")
cat("- variance: ")
cat(binsum$variance)
cat("\n")
cat("- mode    : ")
cat(binsum$mode)
cat("\n")
cat("- skewness: ")
cat(binsum$skewness)
cat("\n")
cat("- kurtosis: ")
cat(binsum$kurtosis)
}
#' @title binomial mean
#' @description calculates the mean success in a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return computed mean
#' @export
#' @examples
bin_mean <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binmean <- aux_mean(trials, prob)
return(binmean)
}
#' @title binomial variance
#' @description calculates the variance in a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return computed variance
#' @export
#' @examples
bin_variance <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binvar <- aux_variance(trials, prob)
return(binvar)
}
#' @title binomial mode
#' @description calculates the mode in a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return computed mode
#' @export
#' @examples
bin_mode <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binmode <- aux_mode(trials, prob)
return(binmode)
}
#' @title binomial skewness
#' @description calculates the skewness of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return computed skewness
#' @export
#' @examples
bin_skewness <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binskew <- aux_skewness(trials, prob)
return(binskew)
}
#' @title binomial kurtosis
#' @description calculates the kurtosis of a binomial distribution
#' @param trials number of trials
#' @param prob probability of success
#' @return computed kurtosis
#' @export
#' @examples
bin_kurtosis <- function(trials=1, prob=0.5) {
check_trials(trials)
check_prob(prob)
binkurt <- aux_kurtosis(trials, prob)
return(binkurt)
}
check_prob(list(0.2))
check_prob(TRUE)
source("...R/binomial.R")
setwd("~/School/Spring 2019/Stat 133/workout03/binomial/tests/testthat")
source("...R/binomial.R")
getwd()
source("R/binomial.R")
library(testthat)
test_file("tests/testthat/test-check-args.R")
getwd()
library(binomial)
test_that("check_prob with ok values", {
expect_true(check_prob(0))
expect_true(check_prob(1))
expect_true(check_prob(0.5))
})
test_that("check_prob fails with invalid lengths", {
expect_error(check_prob(c(0.2, 0.3)))
})
test_that("check_prob fails with invalid types", {
expect_error(check_prob("0.3"))
expect_error(check_prob(list(0.2)))
expect_error(check_prob(TRUE))
})
test_that("check_prob fails with invalid range", {
expect_error(check_prob(-0.1))
expect_error(check_prob(1.1))
})
# check_trials
test_that("check_trials with ok values", {
expect_true(check_trials(0))
expect_true(check_trials(1))
expect_true(check_trials(20))
})
test_that("check_trials fails with invalid lengths", {
expect_error(check_trials(c(10, 15)))
})
test_that("check_trials fails with invalid types", {
expect_error(check_trials("5"))
expect_error(check_trials(list(8)))
expect_error(check_trials(TRUE))
})
test_that("check_trials fails with invalid range", {
expect_error(check_trials(-2))
})
test_that("check_trials fails with non-integer", {
expect_error(check_trials(5.5))
})
# check_success
test_that("check_success with ok values", {
expect_true(check_success(0, 5))
expect_true(check_success(5, 5))
expect_true(check_success(c(7, 10), 12))
})
test_that("check_success fails with invalid types", {
expect_error(check_success("5", 8))
expect_error(check_success(list(8), 10))
expect_error(check_success(TRUE), 2)
})
test_that("check_success fails with invalid range", {
expect_error(check_success(-2, 10))
expect_error(check_success(1:10, 8))
})
test_that("check_trials fails with non-integer", {
expect_error(check_success(5.5, 6))
})
test_that("check_success fails with invalid types", {
expect_error(check_success("5", 8))
expect_error(check_success(list(8), 10))
expect_error(check_success(TRUE, 2))
})
typeof(Inf)
test_that("aux_mode computes correct mode", {
expect_equal(aux_mode(2, 0.5), 1)
expect_equal(aux_mode(1, 0.5), c(1,0))
})
test_that("aux_mean outputs correct length", {
expect_length(aux_mode(2, 0.5), 1)
expect_length(aux_mode(1, 0.5), 2)
})
typeof(c(0,1))
aux_skewness(2, 0.5)
test_that("aux_skewness computes correct value", {
expect_equal(aux_skewness(2, 0.5), 0)
expect_equal(abs(aux_skewness(2, 1)), Inf)
})
test_that("aux_skewness outputs correct length", {
expect_length(aux_skewness(2, 0.5), 1)
})
test_that("aux_skewness outputs correct type", {
expect_type(aux_skewness(2, 0.5), "double")
})
test_that("aux_kurtosis outputs correct type", {
expect_type(aux_kurtosis(2, 0.5), "double")
})
test_that("aux_kurtosis outputs correct length", {
expect_length(aux_kurtosis(2, 0.5), 1)
})
test_that("aux_kurtosis computes correct value", {
expect_equal(aux_kurtosis(2, 0.5), 0)
expect_equal(abs(aux_kurtosis(2, 1)), Inf)
})
test_that("aux_kurtosis computes correct value", {
expect_equal(aux_kurtosis(2, 0.5), -1)
expect_equal(abs(aux_kurtosis(2, 1)), Inf)
})
bin_choose(5, 1:3)
test_that("bin_choose computes right value", {
expect_equal(bin_choose(5, 2), 10)
expect_equal(bin_choose(5, 1:3), c(5, 10, 10))
})
test_that("bin_choose computes right length", {
expect_length(bin_choose(7, 4), 1)
expect_length(bin_choose(7, 0:7), 8)
})
test_that("bin_choose fails when choosing invalid k", {
expect_error(bin_choose(5, 6))
expect_error(bin_choose(5, 2.5))
expect_error(bin_choose(5, -1))
})
test_that("bin_choose fails when choosing invalid n", {
expect_error(bin_choose(2.5, 1))
expect_error(bin_choose(-2, 1))
})
}
}
#' @title binomial choose
#' @description calculates the number of ways to choose k objects from n
#' @param n number of objects to choose from
#' @param k number to choose
#' @return numeric vector of choose values
#' @export
#' @examples
bin_choose <- function(n=1,k=1) {
if(any(!(n%%1==0)) | any(!(k%%1==0))) {
stop("Values must be whole numbers")
} else if(any(k>n)) {
stop("k cannot be greater than n")
} else if(any(n<0) | any(k<0)) {
stop("Values must be positive")
} else if(length(n)<length(k)) {
n <- rep(n, length(k))
} else if(length(n))>1 {
stop("n must be of length 1")
} else {
nchoosek <- factorial(n)/(factorial(k)*factorial(n-k))
return(nchoosek)
}
}
#' @title binomial choose
#' @description calculates the number of ways to choose k objects from n
#' @param n number of objects to choose from
#' @param k number to choose
#' @return numeric vector of choose values
#' @export
#' @examples
bin_choose <- function(n=1,k=1) {
if(any(!(n%%1==0)) | any(!(k%%1==0))) {
stop("Values must be whole numbers")
} else if(any(k>n)) {
stop("k cannot be greater than n")
} else if(any(n<0) | any(k<0)) {
stop("Values must be positive")
} else if(length(n)<length(k)) {
n <- rep(n, length(k))
} else if(length(n)>1) {
stop("n must be of length 1")
} else {
nchoosek <- factorial(n)/(factorial(k)*factorial(n-k))
return(nchoosek)
}
}
test_that("bin_choose fails when choosing invalid n", {
expect_error(bin_choose(2.5, 1))
expect_error(bin_choose(-2, 1))
expec_error(bin_choose(3:4, 2))
})
test_that("bin_choose fails when choosing invalid n", {
expect_error(bin_choose(2.5, 1))
expect_error(bin_choose(-2, 1))
expect_error(bin_choose(3:4, 2))
})
test_that("bin_probability computes right value", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_choose(0:2, 5, 0.5), c(0.03125, 0.15625, 0.31250))
})
test_that("bin_probability computes right value", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.31250))
})
bin_probability(0:2, 5, 0.5)
bin_choose(5, 0:@)
bin_choose(5, 0:2)
bin_choose(5, 0:2)
#' @title binomial choose
#' @description calculates the number of ways to choose k objects from n
#' @param n number of objects to choose from
#' @param k number to choose
#' @return numeric vector of choose values
#' @export
#' @examples
bin_choose <- function(n=1,k=1) {
if(any(!(n%%1==0)) | any(!(k%%1==0))) {
stop("Values must be whole numbers")
} else if(any(k>n)) {
stop("k cannot be greater than n")
} else if(any(n<0) | any(k<0)) {
stop("Values must be positive")
} else if(length(n)<length(k)) {
n <- rep(n, length(k))
} else if(length(n)>1) {
stop("n must be of length 1")
} else {
nchoosek <- factorial(n)/((factorial(k)*factorial(n-k)))
return(nchoosek)
}
}
bin_choose(5, 0:2)
test_that("bin_choose computes right value", {
expect_equal(bin_choose(5, 2), 10)
expect_equal(bin_choose(5, 1:3), c(5, 10, 10))
})
#' @title binomial choose
#' @description calculates the number of ways to choose k objects from n
#' @param n number of objects to choose from
#' @param k number to choose
#' @return numeric vector of choose values
#' @export
#' @examples
bin_choose <- function(n=1,k=1) {
if(any(!(n%%1==0)) | any(!(k%%1==0))) {
stop("Values must be whole numbers")
} else if(any(k>n)) {
stop("k cannot be greater than n")
} else if(any(n<0) | any(k<0)) {
stop("Values must be positive")
} else if(length(n)<length(k)) {
n <- rep(n, length(k))
} else if(length(n)>length(k)) {
k <- rep(k, length(n))
}
nchoosek <- factorial(n)/(factorial(k)*factorial(n-k))
return(nchoosek)
}
test_that("bin_choose computes right value", {
expect_equal(bin_choose(5, 2), 10)
expect_equal(bin_choose(5, 1:3), c(5, 10, 10))
})
test_that("bin_probability computes right value", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.31250))
})
#' @title binomial choose
#' @description calculates the number of ways to choose k objects from n
#' @param n number of objects to choose from
#' @param k number to choose
#' @return numeric vector of choose values
#' @export
#' @examples
bin_choose <- function(n=1,k=1) {
if(any(!(n%%1==0)) | any(!(k%%1==0))) {
stop("Values must be whole numbers")
} else if(any(k>n)) {
stop("k cannot be greater than n")
} else if(any(n<0) | any(k<0)) {
stop("Values must be positive")
} else if(1<length(k)) {
n <- rep(n, length(k))
} else if(length(n)>1) {
stop("n must be of length 1")
}
nchoosek <- factorial(n)/(factorial(k)*factorial(n-k))
return(nchoosek)
}
test_that("bin_choose fails when choosing invalid n", {
expect_error(bin_choose(2.5, 1))
expect_error(bin_choose(-2, 1))
expect_error(bin_choose(3:4, 2))
})
source('~/School/Spring 2019/Stat 133/workout03/binomial/tests/testthat/test-main-functions.R', echo=TRUE)
test_that("bin_choose computes right value", {
expect_equal(bin_choose(5, 2), 10)
expect_equal(bin_choose(5, 1:3), c(5, 10, 10))
})
test_that("bin_probability computes right value", {
expect_equal(bin_probability(2, 5, 0.5), 0.3125)
expect_equal(bin_probability(0:2, 5, 0.5), c(0.03125, 0.15625, 0.31250))
})
test_that("bin_probability computes right length", {
expect_length(bin_probability(7, 4), 1)
expect_length(bin_probability(7, 0:7), 8)
})
test_that("bin_probability computes right length", {
expect_length(bin_probability(7, 4, 0.5), 1)
expect_length(bin_probability(7, 0:7, 0.5), 8)
})
test_that("bin_probability computes right length", {
expect_length(bin_probability(4, 7, 0.5), 1)
expect_length(bin_probability(0:7, 7, 0.5), 8)
})
library(testthat)
library(binomial)
test_check("binomial")
library(binomial)
test_check("binomial")
devtools::test()
test_that("bin_probability computes between 0 and 1", {
expect_lte(bin_probability(6, 5, 0.5), 1)
expect_gte(bin_probability(6, 4, 0.5), 0)
})
devtools::test()
typeof(bin_distribution())
test_that("bin_distribution outputs class bindis", {
expect_equal(class(bin_distribution), "bindis")
})
test_that("bin_distribution outputs class bindis", {
expect_equal(class(bin_distribution()), "bindis")
})
test_that("bin_distribution outputs class bindis", {
expect_equal(class(bin_distribution()), c("bindis", "data.frame"))
})
test_that("bin_distribution outputs currect size", {
expect_equal(nrow(bin_distribution()), 2)
expect_equal(ncol(bin_distribution()), 2)
})
test_that("bin_distribution outputs dataframe", {
expect_equal(typeof(bin_distribution()), "list")
})
test_that("bin_distribution outputs dataframe", {
expect_equal(typeof(bin_cumulative()), "list")
})
library(binomial)
library(binomial)
